import socket
import threading
import random
import time
import logging
from Settings.config import TELNET_PORT, TELNET_BANNER, VALID_USERS
from Settings.utils import send_message_to_soc

# Configure logging
logging.basicConfig(
    filename='honeypot.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
)

def log_event(message, level=logging.INFO):
    """Log an event to the log file and console."""
    logging.log(level, message)
    print(message)

def handle_telnet_client(client_socket, address):
    """Handle Telnet connection."""
    log_event(f"[TELNET] Connection from {address}")
    send_message_to_soc(f"[TELNET] Connection from {address}")

    client_socket.send(TELNET_BANNER)
    time.sleep(random.uniform(0.1, 0.5))  # Simulate delay
    client_socket.send(b"login: ")
    username = client_socket.recv(1024).decode().strip()
    time.sleep(random.uniform(0.1, 0.5))  # Simulate delay
    client_socket.send(b"Password: ")
    password = client_socket.recv(1024).decode().strip()

    log_event(f"[TELNET] {address} - Username: {username}, Password: {password}")
    send_message_to_soc(f"[TELNET] {address} - Username: {username}, Password: {password}")

    # Validate username and password
    if VALID_USERS.get(username) == password:
        client_socket.send(b"Login successful\r\n")
        send_message_to_soc(f"[TELNET] {address} - Login successful for user: {username}")
        # Optionally handle successful login, e.g., enter a fake shell
    else:
        client_socket.send(b"Login incorrect\r\n")
        time.sleep(random.uniform(0.5, 1.5))  # Simulate delay
        # Deception: Show fake banner again
        client_socket.send(TELNET_BANNER)
        time.sleep(random.uniform(0.1, 0.5))  # Simulate delay
        client_socket.send(b"login: ")

    # Close connection after the second failed login attempt
    client_socket.close()

def run_telnet_server():
    """Start the fake Telnet server."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.bind(('', TELNET_PORT))
        sock.listen()
        log_event(f"[TELNET] Telnet listening on port {TELNET_PORT}")
        while True:
            client_socket, address = sock.accept()
            threading.Thread(target=handle_telnet_client, args=(client_socket, address)).start()

if __name__ == "__main__":
    run_telnet_server()
